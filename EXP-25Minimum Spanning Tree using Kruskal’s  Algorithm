#include <stdio.h>

int parent[10];

int find(int i)
{
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void unionSets(int i, int j)
{
    int a = find(i), b = find(j);
    parent[a] = b;
}

void kruskal(int cost[5][5], int n)
{
    int edges = 0, mincost = 0;
    for (int i = 0; i < n; i++)
        parent[i] = i;
    while (edges < n - 1)
    {
        int min = 999, a = -1, b = -1;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (find(i) != find(j) && cost[i][j] < min)
                {
                    min = cost[i][j];
                    a = i;
                    b = j;
                }
            }
        }
        unionSets(a, b);
        printf("%d - %d : %d\n", a, b, min);
        mincost += min;
        edges++;
    }
    printf("Min Cost = %d\n", mincost);
}

void main()
{
    int cost[5][5] = {
        {999, 2, 999, 6, 999},
        {2, 999, 3, 8, 5},
        {999, 3, 999, 999, 7},
        {6, 8, 999, 999, 9},
        {999, 5, 7, 9, 999}};
    kruskal(cost, 5);
}
